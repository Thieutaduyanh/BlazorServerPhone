@page "/user/create"
@using BlazorServerApp.Data
@using MySql.Data.MySqlClient
<!-- dieu huong -->
@inject NavigationManager navigationManager

<h3>Create a new user</h3>

<EditForm Model="user" OnValidSubmit="HandleCreateUser">
    <DataAnnotationsValidator />
   <div class="row">
       <div class="col-6">
            <div class="mb-3">
                <label class="form-label">Name</label>
                <InputText @bind-Value=user.UserName class="form-control" />
                <ValidationMessage For="() => user.UserName" />
            </div>

            <div class="mb-3">
                <label class="form-label">Email</label>
                <InputText @bind-Value=user.UserEmail class="form-control" />
                <ValidationMessage For="() => user.UserEmail" />
            </div>

            <div class="mb-3">
                <label class="form-label">Password</label>
                <InputText @bind-Value=user.UserPassword class="form-control" />
                <ValidationMessage For="() => user.UserPassword" />
            </div>

            <div class="mb-3">
                <label class="form-label">Level</label>
                <InputSelect @bind-Value=user.UserLevel class="form-control">
                    <option value="0">Admin</option>
                    <option value="1">Member</option>
                </InputSelect>
            </div>

            <div class="mb-3">
                <label class="form-label">Status</label>
                <InputSelect @bind-Value=user.IsDeleted class="form-control">
                    <option value="0">Active</option>
                    <option value="1">Deleted</option>
                </InputSelect>
            </div>

            <div class="mb-3">
                <Button Type="ButtonType.Submit" Color="ButtonColor.Success">Save</Button>
                <Button Type="ButtonType.Link" Color="ButtonColor.Primary" To="user">Back</Button>
            </div>
       </div>

       <div class="col-6">
           <div class="mb-3">
                <label class="form-label">Avatar</label>
                <InputFile class="form-control" OnChange="HanldeSelectedFile"></InputFile>
                @if(avatarUrl != "")
                {
                    <img src="@avatarUrl" style="max-width:500px" />
                }
           </div>
       </div>
   </div>
</EditForm>

@code {
    private User user = new User();
    private IBrowserFile selectedFile;
    private string avatarUrl = "";

    private async Task HanldeSelectedFile(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        var resizeFile = await e.File.RequestImageFileAsync("image/jpeg", 500, 500);
        var buffer = new byte[resizeFile.Size];
        await resizeFile.OpenReadStream().ReadAsync(buffer);
        avatarUrl = $"data:image/jpeg;base64,{Convert.ToBase64String(buffer)}";
    }

    private async Task HandleCreateUser()
    {
        try
        {
            if (selectedFile != null)
            {
                await UploadSelectedFile(selectedFile);
            }
            string name = user.UserName;
            string email = user.UserEmail;
            string password = user.UserPassword;
            int level = user.UserLevel;
            string avatar = user.UserAvatar;
            int status = user.IsDeleted;

            string SqlInsertUser = $"INSERT INTO user(user_name, user_email, user_password, user_level, user_avatar, isDeleted) VALUES('{name}', '{email}', '{password}', {level}, '{avatar}', {status})";
            MySqlConnection conn = DBMySQL.GetMySqlConnection();
            conn.Open();
            MySqlCommand cmd = conn.CreateCommand();
            cmd.CommandText = SqlInsertUser;
            cmd.ExecuteNonQuery();
            conn.Close();
            navigationManager.NavigateTo("user");
        }
        catch (Exception ex) { }
    }

    private async Task UploadSelectedFile(IBrowserFile file)
    {
        var fileName = file.Name;
        var folderPath = Path.Combine("wwwroot", "uploads"); //wwwroot/uploads
        var fileParh = Path.Combine(folderPath, fileName); // await : ham dong bo, doi day du thong tin
        Directory.CreateDirectory(folderPath);
        using (var fileStream = new FileStream(fileParh, FileMode.Create))
        {
            await file.OpenReadStream(10000000).CopyToAsync(fileStream);
        }
        user.UserAvatar = $"uploads/{fileName}";
    }
}
